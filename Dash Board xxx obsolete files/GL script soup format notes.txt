x:=getUnionSoup("scripts:gesturelaunch3:ics")c:=x:query(NIL);e:=c:entry()#C42220D  {id: |170264037:65626|,            typelist: [],            function: <function, 0 arg(s) #C422D81>,            name: "Untitled",            description: "",            shortname: NIL,            script: "local x := 1;",            parm: NIL,            version: 1,            _uniqueID: 0,            _modTime: 49649255}n:=c:next()#C4226AD  {id: |gesturelist:gesturelaunch:ICS|,            typelist: [#C42278D],            function: <function, 0 arg(s) #C4227A1>,            name: "Pop up Gesture List",            description: "'Popup Gesture List' script©1997 Innovative Computer SolutionsDisplays a popup menu of all gestures defined for the given icon, and executes the one the user chooses.Note that the script is executed with the parameter with which it was defined, and the recognized gesture is changed to match as well.In other words, the gesture you select from the menu is executed as if you had written that gesture in the first place.",            shortname: "Gesture Popup",            script: "begin	local scriptlist:=clone([]);	local index,item;	local insertpos;		if not config then return nil;		self.scriptvals:=clone([]);		foreach index,item in config.config do	begin		if not strpos(""&index,"script",0) then		begin			insertpos:=binsert(scriptlist,upcase(sprintobject(index))&"-"&&item.summary,'|STR<|,nil,nil);			arrayinsert(scriptvals,index,insertpos);		end;	end;		if length(scriptvals)=0 then return nil;		self.pickactionscript:=func(item)		begin			local sym:=scriptvals[item];			self.word:=sym; 			:GLaunchExecuteScript(self,config,sym);		end;		self._parent:=icon;	:popupmenu(scriptlist,nil);		end",            parm: NIL,            version: 9,            _uniqueID: 37,            _modTime: 49649261}#C4229FD  {id: |outbox:gesturelaunch:ICS|,            typelist: [#C422A71],            function: <function, 0 arg(s) #C422A85>,            name: "Open Outbox",            description: "'Open Outbox' script©1997 Innovative Computer SolutionsOpens the IOBox application with the Outbox visible (the IOBox usually opens to the Inbox).",            script: "begin 	getroot().iobox:openasoutbox();end",            parm: NIL,            version: 2,            _uniqueID: 36,            _modTime: 49649261}#C4233A5  {id: |memstats:gesturelaunch:ICS|,            typelist: [#C423419],            function: <function, 0 arg(s) #C42342D>,            name: "Display storage stats",            description: "'Storage Stats' script©1997 Innovative Computer SolutionsDisplays current storage statistics.",            script: "begin 	local total,used;	local message;		foreach index,store in getstores() do	begin		total:=ceiling((store:totalsize())/1024);		used:=ceiling((store:usedsize())/1024);		message:=message & store:getname() & "-" && (total-used) &"k of" && (total) & "k free";		end;			getroot():notify(4,ensureinternal("Heap Status"),		ensureinternal(message));end",            parm: NIL,            version: 4,            _uniqueID: 35,            _modTime: 49649261}#C422C19  {id: |LaunchNSBasic:Gesturelaunch:ICS|,            typelist: [#C422CF9],            function: <function, 0 arg(s) #C422D0D>,            name: "Launch NSBasic Application",            description: "'Launch NSbasic Application' script©1997 Innovative Computer SolutionsLaunches the NSBasic application named in the parameter.  If the NSBasic application has been turned into a package, use should use 'Launch Application' instead.",            shortname: "NSBasic App",            script: "begin 	local theprogram:=""&parm;	local thechainparm:=self;    //put chain parameter, if any, here		if hasslot(getroot(),'|basic:NSBasic|) then		getroot().|basic:NSBasic|:chain(theprogram,thechainparm);end",            parm: text,            version: 1,            _uniqueID: 34,            _modTime: 49649261}#C422C31  {id: |AgendaScroll:GestureLaunch:ICS|,            typelist: [#C422CA9],            function: <function, 0 arg(s) #C422CBD>,            name: "Open Agenda to...",            description: "'Open Agenda to...' script©1997 Innovative Computer SolutionsOpens the Dates Agenda if it is not already open.  You may supply a number 'n' as a parameter, and the Agenda for 'n' days in the future will be displayed.If you do not provide a parameter, then the recognized number (if any) will be used.  If there is no parameter or there is no valid recognized number, today's Agenda will be displayed.",            script: "begin	local todo:=getroot().calendar;	local scrollto:=parm;	local today;		if isstring(parm) and strfilled(parm) then		scrollto:=(stringtonumber(parm));	if not scrollto then		scrollto:=(stringtonumber(""&word));			if not scrollto then 		scrollto:=0;	scrollto:=floor(scrollto);		today:=time()-(time() mod 1440);			todo:open();	todo:displaydate(today+(scrollto*1440),'Agenda);	end",            parm: text,            version: 4,            _uniqueID: 33,            _modTime: 49649261}#C422F69  {id: |todoscroll:gesturelaunch:ICS|,            typelist: [#C422FE1],            function: <function, 0 arg(s) #C422FF5>,            name: "Open todo list to...",            description: "'Open Todo list to...' script©1997 Innovative Computer SolutionsOpens the Todo list if it is not already open.  You may supply a number 'n' as a parameter, and the todo list for 'n' days in the future will be displayed.If you do not provide a parameter, then the recognized number (if any) will be used.  If there is no parameter or there is no valid recognized number, today's todo list will be displayed.",            script: "begin	local todo:=getroot().calendar;	local scrollto:=parm;	local today;		if isstring(parm) and strfilled(parm) then		scrollto:=(stringtonumber(parm));	if not scrollto then		scrollto:=(stringtonumber(""&word));			if not scrollto then 		scrollto:=0;	scrollto:=floor(scrollto);		today:=time()-(time() mod 1440);			todo:open();	todo:displaydate(today+(scrollto*1440),'Todolist);	end",            parm: text,            version: 4,            _uniqueID: 32,            _modTime: 49649261}#C423475  {id: |namescroll:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423501>,            name: "Open Names app to...",            description: "'Open Names app to...' script©1997 Innovative Computer SolutionsOpens the names/contacts application if it is not already open.  If you supply a parameter, the names app will be scrolled to the first name card which matches the parameter.If you do not supply a parameter, the recognized letter will be used as the search key to scroll to a name card.",            script: "begin	local namesapp:=getroot().cardfile;	local scrollto:=parm;	local do_overview:=nil;		if not isstring(scrollto) or not strfilled(scrollto) then		scrollto:=""&word;		if strreplace(scrollto,"~o","",nil)>0 then		do_overview:=true;			scrollto:=trimstring(scrollto);	if not strfilled(scrollto) then		scrollto:=""&word;			namesapp:open();	local soup:=getunionsoup("names");	local cur:=soup:query({indexpath:'sorton,beginkey:scrollto});	local namesapp:=getroot().cardfile;		local entry:=cur:entry();	if not entry then return;		namesapp:showfounditem(entry,nil);	if do_overview then		adddeferredcall(func() namesapp:showlayout('overview),[]);end",            parm: text,            version: 5,            _uniqueID: 31,            _modTime: 49649261}#C423AA5  {id: |notescrollprev:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423B35>,            name: "Scroll to previous note",            description: "'Scroll to previous note' script©1997 Innovative Computer SolutionsScrolls to the previous note in the notepad.  Useful for quickly getting past long multi-screen notes.",            script: "begin if getroot().paperroll.viewCobject thenbegin	local prev:=getroot().paperroll.allsoups.notes.thecursor:prev();	if not prev then		getroot().paperroll.allsoups.notes.thecursor:next();	broadcastsoupchange("notes");end;end",            parm: NIL,            version: 1,            _uniqueID: 30,            _modTime: 49649261}#C423C2D  {id: |NewRecordingStart:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423CBD>,            name: "New 'recording' note w/Autostart",            description: "'New paper note with Autostart' script©1997 Innovative Computer SolutionsCreates a new 'recording' note in the notepad, and scrolls to that note.  The notepad will be opened if it is not already open.  Recording will start automatically.",            script: "begin	local recurse_children_func:=func(parent,lookingfor)	begin		if hasslot(parent,lookingfor) then return parent.(lookingfor);		local kids:=parent:childviewframes();		local retval;		if not kids then return nil;		foreach kid in kids do			if (retval:=call recurse_children_func with (kid,lookingfor)) then return retval;					return nil;	end;	local button;		if not getroot().paperroll.viewCObject then		getroot().paperroll:open();	if getroot().paperroll.viewCobject then 		getroot().paperroll:addentryfromstationery('|soundpaper:NSG|);		if (button:=call recurse_children_func with (getroot().paperroll.layout,'recordbutton)) then	begin		clicker();		button:buttonclickscript();	end;	end",            parm: NIL,            version: 1,            _uniqueID: 29,            _modTime: 49649261}#C423409  {id: |NoteScrollNext:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423499>,            name: "Scroll to next note",            description: "'Scroll to next note' script©1997 Innovative Computer SolutionsScrolls to the next note in the notepad.  Useful for quickly getting past long multi-screen notes.",            script: "begin if getroot().paperroll.viewCobject thenbegin	local next:=getroot().paperroll.allsoups.notes.thecursor:next();	if not next then		getroot().paperroll.allsoups.notes.thecursor:prev();	broadcastsoupchange("notes");end;end",            parm: NIL,            version: 1,            _uniqueID: 28,            _modTime: 49649261}#C423385  {id: |NewRecording:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423411>,            name: "New 'recording' note",            description: "'New recording note' script©1997 Innovative Computer SolutionsCreates a new 'recording' note in the notepad, and scrolls to that note.  The notepad will be opened if it is not already open.",            script: "begin	if not getroot().paperroll.viewCObject then		getroot().paperroll:open();	if getroot().paperroll.viewCobject then 		getroot().paperroll:addentryfromstationery('|soundpaper:NSG|);end",            parm: NIL,            version: 1,            _uniqueID: 27,            _modTime: 49649261}#C423D75  {id: |showgesture:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|, |~BeforeScript|, |~AfterScript|],            function: <function, 0 arg(s) #C423E09>,            name: "Display Recognized Gesture",            description: "'Display Recognized Gesture' script©1997 Innovative Computer Solutionsbriefly flashes the recognized gesture on-screen - useful for debugging purposes, and for user training.",            script: "begin	:flash_letter(sprintobject(word),sprintobject(config.tag));end",            parm: NIL,            version: 2,            _uniqueID: 26,            _modTime: 49649261}#C4233F9  {id: |heapstats:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423481>,            name: "Display heap stats",            description: "'Heap Stats' script©1997 Innovative Computer SolutionsDisplays current heap statistics.",            script: "begin 	local f,l;		if globalfnexists('newstats) then	begin		local s:=newstats(true);		f:=s.realfree;		l:=s.reallargest;	end;	else	begin		gc();		f:=stats();		l:="<unknown>";	end;	f:=f&&" total bytes ("&(f/1024)&"k) ";	if isnumber(l) then		l:=l&&"bytes ("&(l/1024)&"k) ";			getroot():notify(4,ensureinternal("Heap Status"),		ensureinternal("You have "&f&"of heap free, with a largest available block of "&l&"."));end",            parm: NIL,            version: 1,            _uniqueID: 25,            _modTime: 49649261}#C423409  {id: |newoutline:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423495>,            name: "New 'outline' note",            description: "'New Outline note' script©1997 Innovative Computer SolutionsCreates a new 'outline' note in the notepad, and scrolls to that note.  The notepad will be opened if it is not already open.",            script: "begin	if not getroot().paperroll.viewCObject then		getroot().paperroll:open();	if getroot().paperroll.viewCobject then 		getroot().paperroll:adoptentryfromstationery(nil,'list,nil);end",            parm: NIL,            version: 1,            _uniqueID: 24,            _modTime: 49649261}#C424411  {id: |Newlist:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C424499>,            name: "New 'checklist' note",            description: "'New Checklist note' script©1997 Innovative Computer SolutionsCreates a new 'checklist' note in the notepad, and scrolls to that note.  The notepad will be opened if it is not already open.",            script: "begin	if not getroot().paperroll.viewCObject then		getroot().paperroll:open();	if getroot().paperroll.viewCobject then 		getroot().paperroll:adoptentryfromstationery(nil,'checklist,nil);end",            parm: NIL,            version: 1,            _uniqueID: 23,            _modTime: 49649261}#C423945  {id: |rotate:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C4239D1>,            name: "Rotate Screen",            description: "'Rotate screen' script©1997 Innovative Computer SolutionsChanges the screen orientation.  Same function as the 'rotate' button in the extras drawer.  You may optionally provide one of the following parameters:portrait - switch to portrait orientationportraitflip - switch to portrait orientation (flipped)landscape - switch to landscape orientationlandscapeflip - switch to landscape orientation (flipped)",            shortname: "Rotate",            script: "begin	local orientations:={								portrait:2,								portraitflip:0,								landscape:1,								landscapeflip:3};	local target;									if isstring(parm) and strfilled(parm) then	begin		local sym:=intern(parm);		target:=orientations.(sym);			end;	if target then		setscreenorientation(target);	else	begin		local v:=buildcontext({_proto:@474,viewbounds:icon:globalbox()});		v:open();		v:buttonclickscript();		v:close();		v:=nil;	end;end",            parm: text,            version: 3,            _uniqueID: 22,            _modTime: 49649261}#C423A7D  {id: |execute:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423B61>,            name: "Execute Selected Expression",            description: "'Execute Selected Expression' script©1997 Innovative Computer SolutionsCompiles and executes the currently selected (Newtonscript) text.",            script: "begin		local thehilites:=gethiliteoffsets();		local theview,thehilite,thetext;		local thefunc, theresult;		if not thehilites or length(thehilites)<1 then 				playsound(@102); //error.  no hilite.		thehilite:=thehilites[0];  //grab the first hilite		theview:=thehilite[0];			//who does it belong to?		thetext:=substr(theview.text,thehilite[1],thehilite[2]-thehilite[1]); //get the text		try				thefunc:=compile(thetext)		onexception |evt.ex| do thefunc:=nil;  //if it's not valid, just set to nil		if thefunc then //do this only if thefunc was valid..		begin			try					theresult:=call thefunc with () //call the function returned by compile..			onexception |evt.ex| do theresult:=nil; //if error, set the result to nil;		end;				if theresult and theresult<>true then			PostKeyString(theview,sprintobject(theresult)); //put the result back out..end;",            parm: NIL,            version: 2,            _uniqueID: 21,            _modTime: 49649261}#C423389  {id: |DateTime:gestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423415>,            name: "Type Date and Time",            description: "'Type Date and Time' script©1997 Innovative Computer SolutionsSimulates typing the current date and time on the keyboard.  If no parameter is provided, then only the current date and time is typed.  You may optionally provide a string parameter which contains the following string tags:     $sd - short date (6/30/70),      $md - medium date (June 30, 1970),     $ld - long date (Tuesday, June 30, 1970),     $t  - time (12:00 pm)  GestureLaunch will replace the tags with the current date and/or time, then simulate typing the string.",            shortname: "Date/Time",            script: "begin	local thetext;	local thetime:=time();		if strfilled(parm) then	begin		thetext:=clone(parm);		strreplace(thetext,"$sd",shortdatestr(thetime,(@66).numericDateStrSpec),nil);		strreplace(thetext,"$md",longdatestr(thetime,(@66).yearMonthDayStrSpec),nil);				strreplace(thetext,"$ld",longdatestr(thetime,(@66).longDateStrSpec),nil);		strreplace(thetext,"$lt",timestr(thetime,(@66).longTimeStrSpec),nil);			strreplace(thetext,"$t",timestr(thetime,(@66).shortTimeStrSpec),nil);		end;	else		thetext:=datentime(thetime);	postkeystring('viewfrontkey,thetext);end",            parm: text,            version: 4,            _uniqueID: 20,            _modTime: 49649261}#C423CA1  {id: |DesktopFloat:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423D31>,            name: "Bring Desktop Buttonbar to front",            description: "'Bring Desktop Buttonbar to front' script©1997 Innovative Computer Solutions"Tears off" the NewtCase Desktop ButtonBar so it floats above all other apps.  Desktop must be the backdrop app.",            shortname: "Desktop BB to front",            script: "begin	if getroot().|desktop:ICS|.viewCObject then		getroot().|desktop:ICS|.statusbar:dofloat()end",            parm: NIL,            version: 1,            _uniqueID: 19,            _modTime: 49649261}#C4236FD  {id: |SwitchStore:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C42378D>,            name: "Switch Default Store",            description: "'Switch Default Store' script©1997 Innovative Computer SolutionsChanges the default store.  The default store is advanced to the 'next' valid store (ie; internal->card 1->card 2->internal...).You may optionally provide a parameter which is the name of the store you to which you want to switch.  The name must match exactly, so you should copy it from the card slip.",            shortname: "Switch Default Store",            script: "begin	local stores:=getstores();	local numstores:=length(stores);	local userchoice:=nil;		local defstore:=getdefaultstore();	local defstoresig:=defstore:getsignature();	local defstorenum;	if isstring(parm) and strfilled(parm) then	begin		foreach index,item in stores do			if strequal(item:getname(),parm) then				defstorenum:=index;		if not defstorenum then		begin			getroot():notify(4,ensureinternal("Default Store"),ensureinternal("The '"&parm&"' store could not be found."));			return;		end;			end;	else //'next' store	begin		foreach index,item in stores do			if item:getsignature()=defstoresig then				defstorenum:=index;		defstorenum:=defstorenum+1;		if defstorenum>=numstores then			defstorenum:=0;	end;		setdefaultstore(stores[defstorenum]);	getroot():notify(4,ensureinternal("Default Store"),ensureinternal("The new default store is "&stores[defstorenum]:getname()));end",            parm: text,            version: 2,            _uniqueID: 18,            _modTime: 49649261}#C423CA5  {id: |dock:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423D2D>,            name: "Start NBU/NCU Connection/Dock",            description: "'Dock' script©1997 Innovative Computer SolutionsSimulates opening the 'Dock' application and pressing the 'Connect' button.",            shortname: "Start Dock",            script: "begin	local buttonword:="Connect";	//set the buttonword variable to whatever the 'connect' button says in the connection	//script, if your Newton is a different language than English.	local connectslip:=getroot().connection;	local thebutton;	connectslip:open();	foreach child in connectslip:childviewframes() do		if classof(child.text)='string and strequal(child.text,buttonword) then			thebutton:=child;	if thebutton then		adddeferredcall(func() thebutton:buttonclickscript(),[]);end;",            parm: NIL,            version: 2,            _uniqueID: 17,            _modTime: 49649261}#C423965  {id: |cando:rrisley|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C4239E1>,            name: "Can Do!",            description: "'Can Do!' script©1996 Ron RisleyTakes selected text and makes a new todo item out of it.  Submitted by Ron Risley RRisley@POBOX.COM.",            script: "// Can Do!// Turns the currently selected text into a to do.// Uses current date & no priority.// Copyright © 1995, 1996 Ron Risley // rrisley@pobox.combeginlocal theText;local frontView := GetView('viewFrontKey);if frontViewthen begin        local offset;        local str :=                if frontView.text                then theText := frontView.text                else if frontView.realData                then theText := frontView.realData.text;        if HiliteOwner() and GetHiliteOffsets() and                offset := GetHiliteOffsets()[0]        then theText := SubStr(str,offset[1],offset[2]-offset[1])        else theText := str;        end ;If not strfilled(thetext)then theText := "Nothing selected!";else begintheSoup := GetUnionSoup("To do");theSoup:AddToDefaultStore(        {viewStationery:'ToDoItem,        mtgStartDate:Time(),        height:16,        mtgDuration:30,        mtgDone:NIL,        mtgPriority:3,        data:[  {viewStationery:'para,                text:theText,                viewFont:10241}]});BroadcastSoupChange("To do");end;getroot():notify(4,ensureinternal("CanDo!"),ensureinternal(theText));end;",            parm: NIL,            version: 1,            _uniqueID: 16,            _modTime: 49649261}#C423491  {id: |ReceiveXPort:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423579>,            name: "Receive X-Port",            description: "'Receive X-Port' script©1997 Innovative Computer SolutionsReceive an item using X-Port.",            script: "begin	transportnotify('|xport:ICS|,'receiverequest,[{cause:'user}])end",            parm: NIL,            version: 1,            _uniqueID: 15,            _modTime: 49649261}#C42331D  {id: |Screenshot:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C4233AD>,            name: "Take Screenshot with X-Port",            description: "'Take Screenshot with X-Port' script©1997 Innovative Computer SolutionsTakes a screenshot and opens the X-Port application.",            shortname: "Screenshot",            script: "begin	if not getroot().|xpbase:ICS| then return;	getroot():lockscreen(true);	getroot().|xpbase:ICS|:open();	getroot().|xpbase:ICS|:doscreenshotfunc(nil,nil);	getroot():childviewframes()[length(getroot():childviewframes())-1].btn:buttonclickscript();	getroot():lockscreen(nil);end",            parm: NIL,            version: 1,            _uniqueID: 14,            _modTime: 49649261}#C423529  {id: |SendXPort:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C4235B1>,            name: "Send pending X-Ports",            description: "'Send all pending X-Ports' script©1997 Innovative Computer SolutionsOpens X-Port and sends all X-Port items waiting in the outbox.",            script: "begin	if not getroot().|xpbase:ICS| then return;	getroot().|xpbase:ICS|:open();	getroot().|xpbase:ICS|:dosendallfunc(nil,nil)end",            parm: NIL,            version: 1,            _uniqueID: 13,            _modTime: 49649261}#C423221  {id: |backlight:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423305>,            name: "Toggle Backlight",            description: "'Toggle Backlight' script©1997 Innovative Computer SolutionsToggles the Backlight.  You may optionally provide the words 'on' or 'off' in the parameter to force the backlight on or off instead of simply toggling it.",            script: "begin	local stat;	if isstring(parm) and strfilled(parm) then	begin		if strequal(trimstring(parm),"on") then			stat:=true;		else if strequal(trimstring(parm),"off") then			stat:=nil;		else			stat:=not backlightstatus();	end;	else		stat:=not backlightstatus();		 	Backlight(stat);end",            parm: text,            version: 2,            _uniqueID: 12,            _modTime: 49649261}#C4232D5  {id: |reboot:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423361>,            name: "Reboot Newton",            description: "'Reboot' script©1997 Innovative Computer SolutionsRestarts the Newton (as if the reset button had been pressed).",            shortname: "Reboot",            script: "begin 	adddeferredaction(func() reboot(),[]);end",            parm: NIL,            version: 1,            _uniqueID: 11,            _modTime: 49649261}#C423401  {id: |sleep:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423489>,            name: "Put Newton to Sleep",            description: "'Sleep' script©1997 Innovative Computer SolutionsPuts Newton to Sleep (as if the power switch had been pressed).",            shortname: "Sleep",            script: "begin 	adddeferredaction(func() poweroff(true),[]);end",            parm: NIL,            version: 1,            _uniqueID: 10,            _modTime: 49649261}#C423915  {id: |find:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C42399D>,            name: "Use Find",            description: "Find script©1997 Innovative Computer SolutionsInitiates a Find operation for the text provided in the parameter.  This is the same as tapping the Find button and entering the text in the Find slip.",            shortname: "Find",            script: "begin 	getroot().finddrawer.findtext:=sprintobject(parm);	getroot().finddrawer:open();	getroot().finddrawer:findbutton('findGlobal);end",            parm: text,            version: 2,            _uniqueID: 9,            _modTime: 49649261}#C4233C9  {id: |assist:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423455>,            name: "Use Assistant",            description: "Assistant script©1997 Innovative Computer SolutionsSends the text provided in the parameter to the Newton Intelligent Assistant.  This is the same as tapping the assist button and entering the text in the assist slip.",            shortname: "Assist",            script: "begin getroot().assistant:tryit(sprintobject(parm));end",            parm: text,            version: 1,            _uniqueID: 8,            _modTime: 49649261}#C4232E9  {id: |notepadscrollbottom:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C42337D>,            name: "Scroll notepad to bottom",            description: "'Scroll notepad to bottom' script©1997 Innovative Computer SolutionsScrolls notepad to the bottom.",            script: "begin if getroot().paperroll.viewCobject thenbegin	getroot().paperroll.allsoups.notes.thecursor:gotokey(99999999);	getroot().paperroll.allsoups.notes.thecursor:prev();end;broadcastsoupchange("notes");end",            parm: NIL,            version: 1,            _uniqueID: 7,            _modTime: 49649261}#C423319  {id: |notepadscrolltop:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C4233A9>,            name: "Scroll notepad to top",            description: "'Scroll notepad to top' script©1997 Innovative Computer SolutionsScrolls notepad to the top.",            script: "begin if getroot().paperroll.viewCobject then	getroot().paperroll.allsoups.notes.thecursor:reset();broadcastsoupchange("notes");end",            parm: NIL,            version: 1,            _uniqueID: 6,            _modTime: 49649261}#C4233ED  {id: |notescrolltop:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423479>,            name: "Scroll to top of note",            description: "'Scroll to top of note' script©1997 Innovative Computer SolutionsScrolls to the top of the currently visible note in the notepad.  Useful to get back to the beginning of a long multi-screen note.",            script: "begin	if getroot().paperroll.viewCobject then 		getroot().paperroll:redochildren();end",            parm: NIL,            version: 1,            _uniqueID: 5,            _modTime: 49649261}#C4245E9  {id: |NewNote:GestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C4246CD>,            name: "New 'paper' note",            description: "'New paper note' script©1997 Innovative Computer SolutionsCreates a new 'paper' note in the notepad, and scrolls to that note.  The notepad will be opened if it is not already open.",            script: "begin	if not getroot().paperroll.viewCObject then		getroot().paperroll:open();	if getroot().paperroll.viewCobject then 		getroot().paperroll:adoptentryfromstationery(nil,'paperroll,nil);end",            parm: NIL,            version: 1,            _uniqueID: 4,            _modTime: 49649261}#C423AA1  {id: |LaunchApp:gestureLaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423B2D>,            name: "Launch Application",            description: "'Launch Application' script©1997 Innovative Computer SolutionsLaunches the package specified in the parameter.  If no package is specified in the parameter, then a picker is opened and scrolled to the first item which begins with the recognized letter.",            shortname: "Launch",            script: "begin	local partEntry;		self.launchfunc:=func(appframe)		begin			local partEntry;			if not appframe then return;			partEntry:=:GetPartEntryFromAppFrame(appframe);			if not partEntry then return;			:LaunchPartEntry(partEntry);		end;			if classof(parm)='package then		:launchfunc(parm);	else	begin		local pickerview;		pickerview:=package_picker:doopen(self,'bogus_slot,'launchfunc);		if pickerview then		begin			pickerview.autoclose:=true;			if not strequal(""&word,"DblClick") then				:cmdkey(word,nil);		end;	end;end",            parm: package,            version: 6,            _uniqueID: 3,            _modTime: 49649261}#C4233C5  {id: |cmdkey:gesturelaunch:ICS|,            typelist: [gesturescript, |~Default Script|],            function: <function, 0 arg(s) #C423451>,            name: "Command key",            description: "Command key simulator script©1997 Innovative Computer SolutionsSimulates tapping a character on the keyboard with option modifier keys down.  The parameter should contain a list of key modifiers (option/opt, command/cmd, shift, or control/ctrl) and the key(s) to press.  For example, 'cmd shift v' would simulate typing v with the command and shift keys held down.You may optionally include the string 'xxx' (no quotes), which will automatically be replaced with the recognized letter.  For example, 'ctrl opt xxx' would simulate typing the recognized letter with the control and option keys held down.If you provide no parameter at all, then the recognized letter will by typed with the command key held down.Be sure to separate modifier keys with spaces, and do not use any extra characters like dashes (ie; don't say 'cmd-v', use 'cmd v').You may string multiple characters together.  For instance 'cmd opt ab' would type a followed by b, both with the command and option keys down.This script is not case sensitive.",            shortname: "CmdKey -",            script: "	begin 		if not strfilled(parm) then 			:cmdkey(word,kCommandModifier); 		else 		begin 			local str:=clone(parm);  			strreplace(str,"xxx",""&word,nil); 			:cmdkey(str,0);		end;  	end",            parm: text,            version: 5,            _uniqueID: 2,            _modTime: 49649261}#C4226A1  {id: |typetext:gesturelaunch:ICS|,            typelist: [gesturescript],            function: <function, 0 arg(s) #C42276D>,            name: "Type text",            description: "Typing simulator script©1997 Innovative Computer SolutionsTakes the given text and simulates typing it on the keyboard.",            shortname: "Type",            script: "begin	if strfilled(parm) then		PostKeyString('viewfrontkey,parm); 	else 		PostKeyString('viewfrontkey,""&word); end",            parm: text,            version: 1,            _uniqueID: 1,            _modTime: 49649261}