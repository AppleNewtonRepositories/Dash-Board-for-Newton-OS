GetGlobalfn('killstdbuttonbar) RO frame:_function #5 Ref(4296633)func(Arg1) begin  local Local1;  Local1 := GetRoot().buttons;  if Arg1    then begin      DefGlobalVar('ButtonBarParams, Arg1);      if SafeSetDisplayParams(CreateDisplayParams(nil))        then Local1:Close();    end;    else begin      UnDefGlobalVar('ButtonBarParams);      if SafeSetDisplayParams(CreateDisplayParams(nil))        then Local1:Open();    end;  GetRoot().ExtrasDrawer:InvalIcons()endGetGlobalfn(' SafeSetDisplayParams) RO frame:_function #5 Ref(4298029)func(Arg1) begin  local Local1, Local2, Local3, Local4, Local5;  if not SetContains(LegalOrientations(), Arg1.orientation)    then return;  Local1 := Arg1.appAreaHeight < 320;  if Local1    then begin      Local2 := GetRoot();      Local3 := GetUserConfig('blessedapp);      if Local3 and not Local2.(Local3).ReOrientToScreen        then begin          Local2:Notify(3, "Rotate", ParamStr("The backdrop icon^?0,\u201C\u^0\u201D\u,|| cannot operate while rotated.", [GetAppName(Local3)]));          return;        end;      Local4 := foreach Local5 in GetRoot():ChildViewFrames() do if not Local5.ReOrientToScreen        then break true;      if Local4        then (if ModalConfirm("Some functions will not show after rotation because they can\u2019\ut operate while rotated.", 'okCancelDefaultOk)          then foreach Local5 in GetRoot():ChildViewFrames() do if not Local5.ReOrientToScreen            then Local5:Close();            else return);    end;  SetDisplayParams(Arg1);  trueendGetRoot().FixupDisplay RO frame:_function #5 Ref(4496441)External objects used: • kFunc1: newfunc(#2)func() begin  local Local1, Local2, Local4, Local5, Local7;  Local1 := GetRoot():ChildViewFrames();  foreach Local2 in GetStores() do Local2:MarkBusy('_newt, nil);  try     Local4 := GetRoot().MsgBox;    BusyBoxControl(2);    :DrawShape(MakeRect(-10000, -10000, 10000, 10000), {fillPattern: 5});    Local4:BotherScreenCentered("Rebuilding display, please wait a few seconds\u2026");    SetVolume(0);    StableSort(Local1, "kFunc1", nil);    :LockScreen(true);    foreach Local5 in Local1 do if not Local5.ReOrientToScreen      then try Local5:_Close()      onexception |evt.ex| do begin end;    :SyncView();    foreach Local5 in Local1 do try if Local5.ReOrientToScreen      then (if Local5.viewCObject        then Local5:ReOrientToScreen());      else Local5:Open()    onexception |evt.ex| do begin end;    Local7 := GetUserConfig('blessedapp);    if Local7      then (Local7 := GetRoot().(Local7));    if Local7 and Local7.viewCObject      then Local7:MoveBehind(GetRoot():ChildViewFrames()[0]);    Local4:Nevermind();    PlaySoundSync(@302 /* {#5} */);    Sleep(8);    SetSystemVolume(GetUserConfig('soundVolumeDb));    :LockScreen(nil);    :Dirty();    RefreshViews();  onexception |evt.ex| do begin    foreach Local2 in GetStores() do Local2:MarkNotBusy('_newt);    SetSystemVolume(GetUserConfig('soundVolumeDb));    Rethrow();  end;  foreach Local2 in GetStores() do Local2:MarkNotBusy('_newt)GetRoot().buttons.iconspace._proto.viewSetupChildrenScript RO frame:_function #5 Ref(5581473)func() begin  local Local1, Local3, Local4, Local5, Local6, Local7, Local9, Local10, Local11, Local12, Local14, Local15, Local16, Local17, Local19, Local21, Local22;  needsRecalc := 'all;  Local22 := :IconCapacity();  Local12 := displayParams.buttonBarPosition = 'right or displayParams.buttonBarPosition = 'left;  Local6 := (if Local12    then ProtoSoftButtonBarIconV;    else ProtoSoftButtonBarIconH):GetAdjustedProto();  Local17 := userConfiguration.blessedapp;  Local5 := 0;  Local21 := 0;  if Local12    then (Local21 := (displayParams.buttonBarBounds.bottom - displayParams.buttonBarBounds.top - 40) mod iconSpacingV div 2);    else (Local5 := (displayParams.buttonBarBounds.right - displayParams.buttonBarBounds.left - 40) mod iconSpacingH div 2);  if Local12    then (self.hSpacing := displayParams.buttonBarBounds.right - displayParams.buttonBarBounds.left);    else (self.hSpacing := iconSpacingH);  Local14 := [];  Local15 := [];  foreach Local10 in GetValidStores() do begin    Local1 := Local10:GetSoup("Packages");    if Local1      then AddArraySlot(Local15, Local1);  end;  foreach Local3 in Local15 do begin    Local4 := Local3:Query('{indexPath: packageName, tagspec: {none: _frozen, all: _package}});    Local7 := Local3:Query(:GetQuerySpec('_buttonBar));    Local11 := Local7:entry();    while Local11 do begin      if Local11.app <> Local17        then begin          Local9 := nil;          if Local11.packageName            then try               Local16 := Local4:GotoKey(Local11.packageName);              Local9 := Local16 and StrEqual(Local4:EntryKey(), Local11.packageName) and not IsPackageActive(Local16.pkgRef);            onexception |evt.ex| do Local9 := true;          AddArraySlot(Local14, {_proto: Local6, target: {_proto: @589 /* {#19} */.(Local11.class), fentry: Local11, notActive: Local9}});        end;      Local11 := Local7:Next();      Local11;    end;  end;  InsertionSort(Local14, '|<|, 'target.fentry.sequence);  if length(Local14) > Local22    then begin      SetLength(Local14, Local22);      if saturationCheck        then begin          saturationCheck := nil;          :Notify(3, title, "The button bar couldn\u2019\ut hold all the icons.  The overflow will show in \u201C\uUnfiled Icons\u201D\u.");        end;    end;  if length(Local14) > 0 and (Local5 <> 0 or Local21 <> 0)    then (Local14[0].viewBounds := OffsetRect(Local14[0].viewBounds, Local5, Local21));  visibleItems := foreach Local19 in Local14 collect Local19.target;  viewChildren := Local14;  if displayParams.buttonBarControlsPosition = 'top or displayParams.buttonBarControlsPosition = 'left    then ArrayInsert(viewChildren, bbarControls, 0);    else AddArraySlot(viewChildren, bbarControls)endend"P Soup has changed!"